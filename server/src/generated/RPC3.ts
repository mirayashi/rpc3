/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common.js'

export type GlobalParamsStruct = {
  minStake: PromiseOrValue<BigNumberish>
  consensusMaxDuration: PromiseOrValue<BigNumberish>
  consensusQuorumPercent: PromiseOrValue<BigNumberish>
  consensusMajorityPercent: PromiseOrValue<BigNumberish>
  inactivityDuration: PromiseOrValue<BigNumberish>
  ownerRoyaltiesPercent: PromiseOrValue<BigNumberish>
  slashPercent: PromiseOrValue<BigNumberish>
  housekeepBaseReward: PromiseOrValue<BigNumberish>
  housekeepCleanReward: PromiseOrValue<BigNumberish>
  maxServers: PromiseOrValue<BigNumberish>
  maxBatchSize: PromiseOrValue<BigNumberish>
}

export type GlobalParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  minStake: BigNumber
  consensusMaxDuration: BigNumber
  consensusQuorumPercent: BigNumber
  consensusMajorityPercent: BigNumber
  inactivityDuration: BigNumber
  ownerRoyaltiesPercent: BigNumber
  slashPercent: BigNumber
  housekeepBaseReward: BigNumber
  housekeepCleanReward: BigNumber
  maxServers: BigNumber
  maxBatchSize: BigNumber
}

export type IPFSMultihashStruct = {
  header: PromiseOrValue<BytesLike>
  digest: PromiseOrValue<BytesLike>
}

export type IPFSMultihashStructOutput = [string, string] & {
  header: string
  digest: string
}

export type RequestStruct = {
  author: PromiseOrValue<string>
  ipfsHash: IPFSMultihashStruct
}

export type RequestStructOutput = [string, IPFSMultihashStructOutput] & {
  author: string
  ipfsHash: IPFSMultihashStructOutput
}

export type BatchViewStruct = {
  nonce: PromiseOrValue<BigNumberish>
  page: PromiseOrValue<BigNumberish>
  maxPage: PromiseOrValue<BigNumberish>
  expiresAt: PromiseOrValue<BigNumberish>
  requests: RequestStruct[]
  initialStateIpfsHash: IPFSMultihashStruct
}

export type BatchViewStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  RequestStructOutput[],
  IPFSMultihashStructOutput
] & {
  nonce: BigNumber
  page: BigNumber
  maxPage: BigNumber
  expiresAt: BigNumber
  requests: RequestStructOutput[]
  initialStateIpfsHash: IPFSMultihashStructOutput
}

export type ServerStruct = {
  addr: PromiseOrValue<string>
  stake: PromiseOrValue<BigNumberish>
  contributions: PromiseOrValue<BigNumberish>
  lastSeen: PromiseOrValue<BigNumberish>
  nextHousekeepAt: PromiseOrValue<BigNumberish>
}

export type ServerStructOutput = [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
  addr: string
  stake: BigNumber
  contributions: BigNumber
  lastSeen: BigNumber
  nextHousekeepAt: BigNumber
}

export type BatchResultStruct = {
  responseIpfsHash: IPFSMultihashStruct
  finalStateIpfsHash: IPFSMultihashStruct
}

export type BatchResultStructOutput = [IPFSMultihashStructOutput, IPFSMultihashStructOutput] & {
  responseIpfsHash: IPFSMultihashStructOutput
  finalStateIpfsHash: IPFSMultihashStructOutput
}

export interface RPC3Interface extends utils.Interface {
  functions: {
    'amIRegistered()': FunctionFragment
    'applyPendingContribution()': FunctionFragment
    'claimRewards()': FunctionFragment
    'donateToTreasury()': FunctionFragment
    'estimateClaimableRewards()': FunctionFragment
    'getCurrentBatch(uint256)': FunctionFragment
    'getInactiveServers(uint256)': FunctionFragment
    'getResponse(uint256)': FunctionFragment
    'getServerCount()': FunctionFragment
    'getServerData()': FunctionFragment
    'getStakeRequirement()': FunctionFragment
    'globalParams()': FunctionFragment
    'housekeepInactive(address[])': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'payments(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'sendRequest((bytes32,bytes32))': FunctionFragment
    'serverRegister()': FunctionFragment
    'serverUnregister()': FunctionFragment
    'setGlobalParams((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))': FunctionFragment
    'skipBatchIfConsensusExpired()': FunctionFragment
    'submitBatchResult(uint256,((bytes32,bytes32),(bytes32,bytes32)))': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'treasury()': FunctionFragment
    'unpause()': FunctionFragment
    'withdrawPayments(address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'amIRegistered'
      | 'applyPendingContribution'
      | 'claimRewards'
      | 'donateToTreasury'
      | 'estimateClaimableRewards'
      | 'getCurrentBatch'
      | 'getInactiveServers'
      | 'getResponse'
      | 'getServerCount'
      | 'getServerData'
      | 'getStakeRequirement'
      | 'globalParams'
      | 'housekeepInactive'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'payments'
      | 'renounceOwnership'
      | 'sendRequest'
      | 'serverRegister'
      | 'serverUnregister'
      | 'setGlobalParams'
      | 'skipBatchIfConsensusExpired'
      | 'submitBatchResult'
      | 'transferOwnership'
      | 'treasury'
      | 'unpause'
      | 'withdrawPayments'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'amIRegistered', values?: undefined): string
  encodeFunctionData(functionFragment: 'applyPendingContribution', values?: undefined): string
  encodeFunctionData(functionFragment: 'claimRewards', values?: undefined): string
  encodeFunctionData(functionFragment: 'donateToTreasury', values?: undefined): string
  encodeFunctionData(functionFragment: 'estimateClaimableRewards', values?: undefined): string
  encodeFunctionData(functionFragment: 'getCurrentBatch', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'getInactiveServers', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'getResponse', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'getServerCount', values?: undefined): string
  encodeFunctionData(functionFragment: 'getServerData', values?: undefined): string
  encodeFunctionData(functionFragment: 'getStakeRequirement', values?: undefined): string
  encodeFunctionData(functionFragment: 'globalParams', values?: undefined): string
  encodeFunctionData(functionFragment: 'housekeepInactive', values: [PromiseOrValue<string>[]]): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'payments', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'sendRequest', values: [IPFSMultihashStruct]): string
  encodeFunctionData(functionFragment: 'serverRegister', values?: undefined): string
  encodeFunctionData(functionFragment: 'serverUnregister', values?: undefined): string
  encodeFunctionData(functionFragment: 'setGlobalParams', values: [GlobalParamsStruct]): string
  encodeFunctionData(functionFragment: 'skipBatchIfConsensusExpired', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'submitBatchResult',
    values: [PromiseOrValue<BigNumberish>, BatchResultStruct]
  ): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdrawPayments', values: [PromiseOrValue<string>]): string

  decodeFunctionResult(functionFragment: 'amIRegistered', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'applyPendingContribution', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'donateToTreasury', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'estimateClaimableRewards', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getCurrentBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getInactiveServers', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getResponse', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getServerCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getServerData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getStakeRequirement', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'globalParams', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'housekeepInactive', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'payments', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sendRequest', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'serverRegister', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'serverUnregister', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setGlobalParams', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'skipBatchIfConsensusExpired', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'submitBatchResult', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawPayments', data: BytesLike): Result

  events: {
    'AddedToTreasury(uint256,uint256)': EventFragment
    'BatchCompleted(uint256)': EventFragment
    'BatchFailed(uint256)': EventFragment
    'BatchResultHashSubmitted()': EventFragment
    'GlobalParamsUpdated(tuple)': EventFragment
    'HousekeepSuccess(uint256,uint256)': EventFragment
    'NextBatchReady(uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'RequestSubmitted(uint256)': EventFragment
    'ServerRegistered(address)': EventFragment
    'ServerUnregistered(address)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AddedToTreasury'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BatchCompleted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BatchFailed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BatchResultHashSubmitted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'GlobalParamsUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'HousekeepSuccess'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NextBatchReady'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RequestSubmitted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ServerRegistered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ServerUnregistered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export interface AddedToTreasuryEventObject {
  amount: BigNumber
  royalties: BigNumber
}
export type AddedToTreasuryEvent = TypedEvent<[BigNumber, BigNumber], AddedToTreasuryEventObject>

export type AddedToTreasuryEventFilter = TypedEventFilter<AddedToTreasuryEvent>

export interface BatchCompletedEventObject {
  batchNonce: BigNumber
}
export type BatchCompletedEvent = TypedEvent<[BigNumber], BatchCompletedEventObject>

export type BatchCompletedEventFilter = TypedEventFilter<BatchCompletedEvent>

export interface BatchFailedEventObject {
  batchNonce: BigNumber
}
export type BatchFailedEvent = TypedEvent<[BigNumber], BatchFailedEventObject>

export type BatchFailedEventFilter = TypedEventFilter<BatchFailedEvent>

export interface BatchResultHashSubmittedEventObject {}
export type BatchResultHashSubmittedEvent = TypedEvent<[], BatchResultHashSubmittedEventObject>

export type BatchResultHashSubmittedEventFilter = TypedEventFilter<BatchResultHashSubmittedEvent>

export interface GlobalParamsUpdatedEventObject {
  newValue: GlobalParamsStructOutput
}
export type GlobalParamsUpdatedEvent = TypedEvent<[GlobalParamsStructOutput], GlobalParamsUpdatedEventObject>

export type GlobalParamsUpdatedEventFilter = TypedEventFilter<GlobalParamsUpdatedEvent>

export interface HousekeepSuccessEventObject {
  cleanCount: BigNumber
  nextHousekeepTimestamp: BigNumber
}
export type HousekeepSuccessEvent = TypedEvent<[BigNumber, BigNumber], HousekeepSuccessEventObject>

export type HousekeepSuccessEventFilter = TypedEventFilter<HousekeepSuccessEvent>

export interface NextBatchReadyEventObject {
  batchNonce: BigNumber
}
export type NextBatchReadyEvent = TypedEvent<[BigNumber], NextBatchReadyEventObject>

export type NextBatchReadyEventFilter = TypedEventFilter<NextBatchReadyEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface RequestSubmittedEventObject {
  requestNonce: BigNumber
}
export type RequestSubmittedEvent = TypedEvent<[BigNumber], RequestSubmittedEventObject>

export type RequestSubmittedEventFilter = TypedEventFilter<RequestSubmittedEvent>

export interface ServerRegisteredEventObject {
  addr: string
}
export type ServerRegisteredEvent = TypedEvent<[string], ServerRegisteredEventObject>

export type ServerRegisteredEventFilter = TypedEventFilter<ServerRegisteredEvent>

export interface ServerUnregisteredEventObject {
  addr: string
}
export type ServerUnregisteredEvent = TypedEvent<[string], ServerUnregisteredEventObject>

export type ServerUnregisteredEventFilter = TypedEventFilter<ServerUnregisteredEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface RPC3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: RPC3Interface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    amIRegistered(overrides?: CallOverrides): Promise<[boolean]>

    applyPendingContribution(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    claimRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    donateToTreasury(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    estimateClaimableRewards(overrides?: CallOverrides): Promise<[BigNumber]>

    getCurrentBatch(page: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BatchViewStructOutput]>

    getInactiveServers(page: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string[], BigNumber]>

    getResponse(
      requestNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPFSMultihashStructOutput, BigNumber]>

    getServerCount(overrides?: CallOverrides): Promise<[BigNumber]>

    getServerData(overrides?: CallOverrides): Promise<[ServerStructOutput]>

    getStakeRequirement(overrides?: CallOverrides): Promise<[BigNumber]>

    globalParams(overrides?: CallOverrides): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        minStake: BigNumber
        consensusMaxDuration: BigNumber
        consensusQuorumPercent: BigNumber
        consensusMajorityPercent: BigNumber
        inactivityDuration: BigNumber
        ownerRoyaltiesPercent: BigNumber
        slashPercent: BigNumber
        housekeepBaseReward: BigNumber
        housekeepCleanReward: BigNumber
        maxServers: BigNumber
        maxBatchSize: BigNumber
      }
    >

    housekeepInactive(
      inactiveServers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    payments(dest: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    sendRequest(
      requestIpfsHash: IPFSMultihashStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    serverRegister(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    serverUnregister(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setGlobalParams(
      globalParams_: GlobalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    skipBatchIfConsensusExpired(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    submitBatchResult(
      batchNonce: PromiseOrValue<BigNumberish>,
      result: BatchResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    treasury(overrides?: CallOverrides): Promise<[BigNumber]>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  amIRegistered(overrides?: CallOverrides): Promise<boolean>

  applyPendingContribution(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  claimRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  donateToTreasury(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  estimateClaimableRewards(overrides?: CallOverrides): Promise<BigNumber>

  getCurrentBatch(page: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BatchViewStructOutput>

  getInactiveServers(page: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string[], BigNumber]>

  getResponse(
    requestNonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[IPFSMultihashStructOutput, BigNumber]>

  getServerCount(overrides?: CallOverrides): Promise<BigNumber>

  getServerData(overrides?: CallOverrides): Promise<ServerStructOutput>

  getStakeRequirement(overrides?: CallOverrides): Promise<BigNumber>

  globalParams(overrides?: CallOverrides): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      minStake: BigNumber
      consensusMaxDuration: BigNumber
      consensusQuorumPercent: BigNumber
      consensusMajorityPercent: BigNumber
      inactivityDuration: BigNumber
      ownerRoyaltiesPercent: BigNumber
      slashPercent: BigNumber
      housekeepBaseReward: BigNumber
      housekeepCleanReward: BigNumber
      maxServers: BigNumber
      maxBatchSize: BigNumber
    }
  >

  housekeepInactive(
    inactiveServers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  payments(dest: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  sendRequest(
    requestIpfsHash: IPFSMultihashStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  serverRegister(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  serverUnregister(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  setGlobalParams(
    globalParams_: GlobalParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  skipBatchIfConsensusExpired(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  submitBatchResult(
    batchNonce: PromiseOrValue<BigNumberish>,
    result: BatchResultStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  treasury(overrides?: CallOverrides): Promise<BigNumber>

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  withdrawPayments(
    payee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    amIRegistered(overrides?: CallOverrides): Promise<boolean>

    applyPendingContribution(overrides?: CallOverrides): Promise<boolean>

    claimRewards(overrides?: CallOverrides): Promise<void>

    donateToTreasury(overrides?: CallOverrides): Promise<void>

    estimateClaimableRewards(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentBatch(page: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BatchViewStructOutput>

    getInactiveServers(page: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string[], BigNumber]>

    getResponse(
      requestNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPFSMultihashStructOutput, BigNumber]>

    getServerCount(overrides?: CallOverrides): Promise<BigNumber>

    getServerData(overrides?: CallOverrides): Promise<ServerStructOutput>

    getStakeRequirement(overrides?: CallOverrides): Promise<BigNumber>

    globalParams(overrides?: CallOverrides): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        minStake: BigNumber
        consensusMaxDuration: BigNumber
        consensusQuorumPercent: BigNumber
        consensusMajorityPercent: BigNumber
        inactivityDuration: BigNumber
        ownerRoyaltiesPercent: BigNumber
        slashPercent: BigNumber
        housekeepBaseReward: BigNumber
        housekeepCleanReward: BigNumber
        maxServers: BigNumber
        maxBatchSize: BigNumber
      }
    >

    housekeepInactive(inactiveServers: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    payments(dest: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    sendRequest(requestIpfsHash: IPFSMultihashStruct, overrides?: CallOverrides): Promise<void>

    serverRegister(overrides?: CallOverrides): Promise<void>

    serverUnregister(overrides?: CallOverrides): Promise<void>

    setGlobalParams(globalParams_: GlobalParamsStruct, overrides?: CallOverrides): Promise<void>

    skipBatchIfConsensusExpired(overrides?: CallOverrides): Promise<void>

    submitBatchResult(
      batchNonce: PromiseOrValue<BigNumberish>,
      result: BatchResultStruct,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    treasury(overrides?: CallOverrides): Promise<BigNumber>

    unpause(overrides?: CallOverrides): Promise<void>

    withdrawPayments(payee: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'AddedToTreasury(uint256,uint256)'(amount?: null, royalties?: null): AddedToTreasuryEventFilter
    AddedToTreasury(amount?: null, royalties?: null): AddedToTreasuryEventFilter

    'BatchCompleted(uint256)'(batchNonce?: PromiseOrValue<BigNumberish> | null): BatchCompletedEventFilter
    BatchCompleted(batchNonce?: PromiseOrValue<BigNumberish> | null): BatchCompletedEventFilter

    'BatchFailed(uint256)'(batchNonce?: PromiseOrValue<BigNumberish> | null): BatchFailedEventFilter
    BatchFailed(batchNonce?: PromiseOrValue<BigNumberish> | null): BatchFailedEventFilter

    'BatchResultHashSubmitted()'(): BatchResultHashSubmittedEventFilter
    BatchResultHashSubmitted(): BatchResultHashSubmittedEventFilter

    'GlobalParamsUpdated(tuple)'(newValue?: null): GlobalParamsUpdatedEventFilter
    GlobalParamsUpdated(newValue?: null): GlobalParamsUpdatedEventFilter

    'HousekeepSuccess(uint256,uint256)'(cleanCount?: null, nextHousekeepTimestamp?: null): HousekeepSuccessEventFilter
    HousekeepSuccess(cleanCount?: null, nextHousekeepTimestamp?: null): HousekeepSuccessEventFilter

    'NextBatchReady(uint256)'(batchNonce?: PromiseOrValue<BigNumberish> | null): NextBatchReadyEventFilter
    NextBatchReady(batchNonce?: PromiseOrValue<BigNumberish> | null): NextBatchReadyEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'RequestSubmitted(uint256)'(requestNonce?: PromiseOrValue<BigNumberish> | null): RequestSubmittedEventFilter
    RequestSubmitted(requestNonce?: PromiseOrValue<BigNumberish> | null): RequestSubmittedEventFilter

    'ServerRegistered(address)'(addr?: PromiseOrValue<string> | null): ServerRegisteredEventFilter
    ServerRegistered(addr?: PromiseOrValue<string> | null): ServerRegisteredEventFilter

    'ServerUnregistered(address)'(addr?: PromiseOrValue<string> | null): ServerUnregisteredEventFilter
    ServerUnregistered(addr?: PromiseOrValue<string> | null): ServerUnregisteredEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter
  }

  estimateGas: {
    amIRegistered(overrides?: CallOverrides): Promise<BigNumber>

    applyPendingContribution(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    claimRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    donateToTreasury(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    estimateClaimableRewards(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentBatch(page: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getInactiveServers(page: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getResponse(requestNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getServerCount(overrides?: CallOverrides): Promise<BigNumber>

    getServerData(overrides?: CallOverrides): Promise<BigNumber>

    getStakeRequirement(overrides?: CallOverrides): Promise<BigNumber>

    globalParams(overrides?: CallOverrides): Promise<BigNumber>

    housekeepInactive(
      inactiveServers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    payments(dest: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    sendRequest(
      requestIpfsHash: IPFSMultihashStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    serverRegister(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    serverUnregister(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    setGlobalParams(
      globalParams_: GlobalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    skipBatchIfConsensusExpired(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    submitBatchResult(
      batchNonce: PromiseOrValue<BigNumberish>,
      result: BatchResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    treasury(overrides?: CallOverrides): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    amIRegistered(overrides?: CallOverrides): Promise<PopulatedTransaction>

    applyPendingContribution(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    claimRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    donateToTreasury(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    estimateClaimableRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCurrentBatch(page: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getInactiveServers(page: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getResponse(requestNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getServerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getServerData(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getStakeRequirement(overrides?: CallOverrides): Promise<PopulatedTransaction>

    globalParams(overrides?: CallOverrides): Promise<PopulatedTransaction>

    housekeepInactive(
      inactiveServers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    payments(dest: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    sendRequest(
      requestIpfsHash: IPFSMultihashStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    serverRegister(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    serverUnregister(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    setGlobalParams(
      globalParams_: GlobalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    skipBatchIfConsensusExpired(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    submitBatchResult(
      batchNonce: PromiseOrValue<BigNumberish>,
      result: BatchResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    withdrawPayments(
      payee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
